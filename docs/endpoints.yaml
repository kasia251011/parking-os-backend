openapi: 3.1.0
info:
  title: Parking OS
  version: 1.0.0
  description: According to https://www.mongodb.com/docs/manual/reference/method/ObjectId/ an ObjectID can include letters and as such was declared as string

servers:
  - url: https://parking-os-backend.onrender.com/
paths:
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Provides array with all registered users <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: adminGetUsers
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - users
      summary: Add a new user
      description: Add a new user (development only) <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: addUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid input
  /vehicles:
    get:
      tags:
        - vehicles
      summary: Get all vehicles
      description: Provides array with all registered vehicles <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: adminGetVehicles
      parameters:
        - name: userId
          in: query
          description: Primary key for users table
          required: false
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
    post:
      tags:
        - vehicles
      summary: Add vehicle
      description: Add a vehicle (development only) <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: adminAddVehicle
      requestBody:
        description: Vehicle
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: successful operation
          
  /tickets:
    get:
      tags:
        - tickets
      summary: Get all tickets
      description: Provides array with all tickets <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: usersTickets
      parameters:
        - name: userId
          in: query
          description: User Id
          required: false
          explode: false
          schema:
            type: integer
        - name: active
          in: query
          description: Whether the ticket is currently representing a parked car
          required: false
          explode: false
          schema:
            type: string
            examples: ["true"]
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ticket"
        "400":
          description: Invalid user id
    post:
      tags:
        - tickets
      summary: Add a new ticket
      description: Add a new ticket (development only) <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: addTicket
      requestBody:
        description: Create a new ticket
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TicketCreateSchema"
        required: true
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid input
  /tickets/{code}:
    put:
      tags:
        - tickets
      summary: Validate a ticket
      description: Validate a ticket <br> Allowed roles<span>&#58;</span>  ```ADMIN```,  ```USER```
      operationId: validateTicket
      parameters:
        - name: code
          in: path
          description: Code of ticket
          required: true
          explode: false
          schema:
            type: string
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid code
  /parking-lots/{id}/code:
    get:
      tags:
        - parking lots
      summary: Get parking lot code
      description: Provides a specifics parking lots code <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: getParkingLotsCode
      parameters:
        - name: id
          in: path
          description: Parking lot id
          required: true
          explode: false
          schema:
            type: string
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
  /parking-lots:
    get:
      tags:
        - parking lots
      summary: Get all parking lots
      description: Provides array with all parking lots <br> Allowed roles<span>&#58;</span>  ```ADMIN```, ```USER```
      operationId: getParkingLots
      parameters:
        - name: code
          in: query
          description: Code of parking lot
          required: false
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ParkingLot"
  /parking-lots/{id}:
    get:
      tags:
        - parking lots
      summary: Get parking lot by id
      description: Provides array with all parking lots <br> Allowed roles<span>&#58;</span>  ```ADMIN```, ```USER```
      operationId: getParkingLotById
      parameters:
        - name: id
          in: path
          description: Parking lot id
          required: true
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParkingLot"
    post:
      tags:
        - parking lots
      summary: Add a new parking lot
      description: Add a new parking lot <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: addParkingLot
      parameters:
        - name: id
          in: path
          description: Parking lot id
          required: true
          explode: false
          schema:
            type: string
      requestBody:
        description: Create a new parking lot
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParkingLotCreateSchema"
        required: true
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid input

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Primary key
        name:
          type: string
          description: User's name
        surname:
          type: string
          description: User's surname
        accountBalance:
          type: number
          format: float
          description: Amount of money in PLN
        blocked:
          type: boolean
          description: Status of user
    Ticket:
      type: object
      properties:
        id:
          type: string
          description: Primary key
        userId:
          type: string
          description: User table foregin key
        vehicleLicenceNumber:
          type: string
          description: Vehicle table foregin key
        parkingSpaceId:
          type: string
          description: Parking space foregin key
        issueTimestamp:
          type: integer
          format: timestamp
          description: Start time of parking
        endTimestamp:
          type: integer
          format: timestamp
          description: End time of parking
        amountPaid:
          type: number
          format: float
          description: Amount of money in PLN
        spotName:
          type: string
          description: Name or number of parking spot identifiable by a user
        level:
          type: integer
          description: Parking lot level of the parking spot
        parkingLotId:
          type: string
          description: Parking lot table foregin key
    TicketCreateSchema:
      type: object
      properties:
        userId:
          type: string
          description: User table foregin key
        vehicleLicenceNumber:
          type: string
          description: Vehicle table foregin key
        parkingLotId:
          type: string
          description: Parking lot table foregin key
    ParkingLotCreateSchema:
      type: object
      properties:
        costOfMaintenance:
          type: object
          description: variables for calculating operating costs of the parking lot
          properties:
            electricity:
              type: number
              format: float
              description: Amount of money in PLN
            cleaning:
              type: number
              format: float
              description: Amount of money in PLN
            security:
              type: number
              format: float
              description: Amount of money in PLN
        location:
          type: object
          description: variables for determining the location of the parking lot
          properties:
            city:
              type: string
              description: City where the parking lot is located
            address:
              type: string
              description: Address where the parking lot is located
              examples: ["Zielona 19"]
            latitude:
              type: number
              description: Latitude of the parking lots location
            longitude:
              type: number
              description: Longitude of the parking lots location
        levels:
          type: array
          items:
            type: object
            description: description of levels (cannot be empty)
            properties:
              cars:
                type: number
              trucks:
                type: number
    ParkingLot:
      type: object
      properties:
        id:
          type: string
          description: Primary key
        costOfMaintenance:
          type: object
          description: variables for calculating operating costs of the parking lot
          properties:
            electricity:
              type: number
              format: float
              description: Amount of money in PLN
            cleaning:
              type: number
              format: float
              description: Amount of money in PLN
            security:
              type: number
              format: float
              description: Amount of money in PLN
        location:
          type: object
          description: variables for determining the location of the parking lot
          properties:
            city:
              type: string
              description: City where the parking lot is located
            address:
              type: string
              description: Address where the parking lot is located
              examples: ["Zielona 19"]
            latitude:
              type: number
              description: Latitude of the parking lots location
            longitude:
              type: number
              description: Longitude of the parking lots location
        noLevels:
          type: integer
          description: Indicator of parking lot level, can be negative
    Vehicle:
      type: object
      properties:
        userId:
          type: string
          description: User table foreign key
        type:
          type: string
          description: Type of vehicle
          enum:
            - CAR
            - TRUCK
        brand:
          type: string
          description: Brand of vehicle
        model:
          type: string
          description: Model of vehicle
        licencePlateNumber:
          type: string
          description: Primary key
                    

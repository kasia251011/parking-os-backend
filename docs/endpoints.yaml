openapi: 3.1.0
info:
  title: Parking OS
  version: 1.0.0
  description: According to https://www.mongodb.com/docs/manual/reference/method/ObjectId/ an ObjectID can include letters and as such was declared as string

servers:
  - url: https://parking-os-backend.onrender.com/
paths:
  /user:
    post:
      tags:
        - users
      summary: User adds a new user
      description: Add a new user <br> Allowed roles<span>&#58;</span>  ```USER```
      operationId: addAUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateSchema"
        required: true
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid input
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Provides array with all registered users <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: adminGetUsers
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - users
      summary: Add a new user
      description: Add a new user (development only) <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: addUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid input
  /users/{id}/block:
    put:
      tags:
        - users
      summary: Block an user
      description: Block a certain user <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: blockUser
      parameters:
        - name: id
          in: path
          description: Primary key for users table
          required: true
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Incorrect data

  /vehicles:
    get:
      tags:
        - vehicles
      summary: Get all vehicles
      description: Provides array with all registered vehicles <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: adminGetVehicles
      parameters:
        - name: userId
          in: query
          description: Primary key for users table
          required: false
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
    post:
      tags:
        - vehicles
      summary: Add vehicle
      description: Add a vehicle (development only) <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: adminAddVehicle
      requestBody:
        description: Vehicle
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: successful operation
  
  /vehicles/{licensePlateNumber}:
    get:
      tags:
        - vehicles
      summary: Get vehicle by license plate number
      description: Provides vehicle with specified license plate number <br> Allowed roles<span>&#58;</span>  ```ADMIN``` ```USER```
      operationId: getVehicleByLicensePlateNumber
      parameters:
        - name: licensePlateNumber
          in: path
          description: License plate number
          required: true
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
  /tickets:
    get:
      tags:
        - tickets
      summary: Get all tickets
      description: Provides array with all tickets <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: usersTickets
      parameters:
        - name: userId
          in: query
          description: User Id
          required: false
          explode: false
          schema:
            type: integer
        - name: active
          in: query
          description: Whether the ticket is currently representing a parked car
          required: false
          explode: false
          schema:
            type: boolean
            examples: ["true"]
        - name: vehicleLicenseNumber
          in: query
          description: Vehicle license number
          required: false
          explode: false
          schema:
            type: string
        - name: parkingSpotId
          in: query
          description: Id of parking spot 
          required: false
          explode: false
          schema:
            type: string
        - name: issueTimestamp
          in: query
          description: Date of issue
          required: false
          explode: false
          schema:
            type: number
        - name: endTimestamp
          in: query
          description: Date of end
          required: false
          explode: false
          schema:
            type: number
        - name: level
          in: query
          description: Level of parking lot (only passed if parkingLotId is)
          required: false
          explode: false
          schema:
            type: number
        - name: parkingLotId
          in: query
          description: Parking lot id
          required: false
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ticket"
        "400":
          description: Invalid user id
    post:
      tags:
        - tickets
      summary: Add a new ticket
      description: Add a new ticket (development only) <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: addTicket
      requestBody:
        description: Create a new ticket
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TicketCreateSchema"
        required: true
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid input
        "410":
          description: No parking space avilable
  /tickets/{code}:
    put:
      tags:
        - tickets
      summary: Validate a ticket
      description: Validate a ticket <br> Allowed roles<span>&#58;</span>  ```ADMIN```,  ```USER```
      operationId: validateTicket
      parameters:
        - name: code
          in: path
          description: Code of ticket
          required: true
          explode: false
          schema:
            type: string
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        "400":
          description: Invalid code
        "401":
          description: Insufficient funds
        "402":
          description: 
  /parking-lots/{id}/code:
    get:
      tags:
        - parking lots
      summary: Get parking lot code
      description: Provides a specifics parking lots code <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: getParkingLotsCode
      parameters:
        - name: id
          in: path
          description: Parking lot id
          required: true
          explode: false
          schema:
            type: string
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
  /parking-lots:
    get:
      tags:
        - parking lots
      summary: Get all parking lots
      description: Provides array with all parking lots <br> Allowed roles<span>&#58;</span>  ```ADMIN```, ```USER```
      operationId: getParkingLots
      parameters:
        - name: code
          in: query
          description: Code of parking lot
          required: false
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ParkingLot"
    post:
      tags:
        - parking lots
      summary: Add a new parking lot
      description: Add a new parking lot <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: addParkingLot
      requestBody:
        description: Create a new parking lot
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParkingLotCreateSchema"
        required: true
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid input
  /parking-lots/{id}:
    get:
      tags:
        - parking lots
      summary: Get parking lot by id
      description: Provides array with all parking lots <br> Allowed roles<span>&#58;</span>  ```ADMIN```, ```USER```
      operationId: getParkingLotById
      parameters:
        - name: id
          in: path
          description: Parking lot id
          required: true
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParkingLot"
  /parking-lots/{id}/levels:
    get:
      tags:
        - parking lots
      summary: Get parking lot levels by parking id
      description: Provides array with all parking lot levels <br> Allowed roles<span>&#58;</span>  ```ADMIN```, ```USER```
      operationId: getParkingLotLevelsById
      parameters:
        - name: id
          in: path
          description: Parking lot id
          required: true
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Level"
  /parking-lots/{id}/income:
    get:
      tags:
        - parking lots
      summary: Get parking lot levels by parking id
      description: Provides array with parking lot income stats <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: getParkingLotIncomeById
      parameters:
        - name: id
          in: path
          description: Parking lot id
          required: true
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeStats'
  /parking-lots/{parkingLotId}/parking-spots:
    get:
      tags:
        - parking spots
      summary: Get parking spots
      description: Provides array with all parking spots <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: getParkingSpots
      parameters:
        - name: parkingLotId
          in: path
          description: Parking lot id
          required: true
          explode: false
          schema:
            type: string
        - name: level
          in: query
          description: Level number
          required: true
          explode: false
          schema:
            type: number
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ParkingSpot"
  /parking-lots/{parkingLotId}/parking-spots/{id}/income:
    get:
      tags:
        - parking spots
      summary: Get parking spot income
      description: Provides array with parking spot income <br> Allowed roles<span>&#58;</span>  ```ADMIN```
      operationId: getParkingSpotIncome
      parameters:
        - name: parkingLotId
          in: path
          description: Parking lot id
          required: true
          explode: false
          schema:
            type: string
        - name: id
          in: path
          description: Parking spot Id
          required: true
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties: 
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/IncomeStats'
                  today:
                    type: number
                  now:
                    type: number
                    description: If sopt is not occupied value is 0
  /parking-lots/{id}/tariffs:
    get:
      tags:
        - parking lots
      summary: Get parking let tariffs
      description: Provides array with all parking lot tariffs <br> Allowed roles<span>&#58;</span>  ```ADMIN```,  ```USER```
      operationId: getParkingLotTariff
      parameters:
        - name: id
          in: path
          description: Parking lot id
          required: true
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tariff'
  /login:
    post:
      tags:
        - login
      summary: Log in
      description: Allows the user to log in <br> Allowed roles<span>&#58;</span>  ```USER```
      operationId: userLogIn
      parameters:
        - name: email
          in: cookie
          description: Users email address
          required: true
          explode: false
          schema:
            type: string
            format: email
        - name: password
          in: cookie
          description: Users password
          required: true
          explode: false
          schema:
            type: string
            format: password
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                name: token
                type: string
  /me/ticket:
    get:
      tags:
        - tickets
      summary: User gets their active ticket
      description: Returns all of the users active ticket <br> Allowed roles<span>&#58;</span>  ```USER```
      operationId: getMyTicket
      parameters:
        - name: Authorization
          in: header
          description: JWS token authorizing user
          required: true
          explode: false
          schema:
            type: object
            $ref: '#/components/schemas/JWStoken'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersTicket'
        "401":
          description: No active ticket for user
    post:
      tags:
        - tickets
      summary: User creates ticket
      description: Allows the user to create a ticket and then park <br> Allowed roles<span>&#58;</span>  ```USER```
      operationId: userCreateTicket
      parameters:
        - name: vehicleLicenseNumber
          in: query
          description: Licence plate number of the parking vehicle
          required: true
          explode: false
          schema:
            type: string
        - name: parkingLotId
          in: query
          description: Id of parking lot
          required: true
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid input
        "410":
          description: No parking space avilable

  /me/balance:
    get:
      tags:
        - balance
      summary: User gets their balance
      description: Returns current users balance <br> Allowed roles<span>&#58;</span>  ```USER```
      operationId: getMyBalance
      parameters:
        - name: Authorization
          in: header
          description: JWS token authorizing user
          required: true
          explode: false
          schema:
            type: object
            $ref: '#/components/schemas/JWStoken'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                name: balance
                type: number
                format: float
                description: Amount of money in PLN
    put:
      tags:
        - balance
      summary: Increase users balance
      description: Add money to users balance <br> Allowed roles<span>&#58;</span>   ```USER```
      operationId: addMoney
      parameters:
        - name: Authorization
          in: header
          description: JWS token authorizing user
          required: true
          explode: false
          schema:
            type: object
            $ref: '#/components/schemas/JWStoken'
        - name: value
          in: query
          description: Amount of money to add in PLN
          required: true
          explode: false
          schema:
            type: number
            format: float
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid data
  /me/vehicles:
    get:
      tags:
        - vehicles
      summary: Get users vehicles
      description: Allows the user to see their vehicles <br> Allowed roles<span>&#58;</span>  ```USER```
      operationId: userGetVehicles
      parameters:
        - name: Authorization
          in: header
          description: JWS token authorizing user
          required: true
          explode: false
          schema:
            type: object
            $ref: '#/components/schemas/JWStoken'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
    post:
      tags:
        - vehicles
      summary: User adds a vehicle
      description: Allows the user to add a vehicle <br> Allowed roles<span>&#58;</span>  ```USER```
      operationId: userCreateVehicle
      parameters:
        - name: Authorization
          in: header
          description: JWS token authorizing user
          required: true
          explode: false
          schema:
            type: object
            $ref: '#/components/schemas/JWStoken'
        - name: type
          in: query
          description: Vwhicle type
          required: true
          explode: false
          schema:
            type: string
            description: Type of vehicle
            enum:
              - CAR
              - TRUCK
        - name: brand
          in: query
          description: Vehicle brand
          required: true
          explode: false
          schema:
            type: string
            description: Brand of vehicle
        - name: model
          in: query
          description: Vehicle model
          required: true
          explode: false
          schema:
            type: string
            description: Model of vehicle
        - name: licensePlateNumber
          in: query
          description: Vehicle licence plate number
          required: true
          explode: false
          schema:
            type: string
            description: Primary key
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                name: token
                type: string

components:
  schemas:
    JWStoken:
      type: object
      properties:
        name:
          type: string
          description: Users name
        surname:
          type: string
          description: Users surname
        email:
          type: string
          format: email
          description: Users e-mail address
        role:
          type: string
          enum:
            - USER
            - ADMIN
    User:
      type: object
      properties:
        id:
          type: string
          description: Primary key
        name:
          type: string
          description: User's name
        surname:
          type: string
          description: User's surname
        accountBalance:
          type: number
          format: float
          description: Amount of money in PLN
        blocked:
          type: boolean
          description: Status of user
    UserCreateSchema:
      type: object
      properties:
        name:
          type: string
          description: Users name
        surname:
          type: string
          description: Users surname
        email:
          type: string
          format: email
          description: Users e-mail address
        password:
          type: string
          format: password
          description: Users password
    Ticket:
      type: object
      properties:
        id:
          type: string
          description: Primary key
        userId:
          type: string
          description: User table foregin key
        vehicleLicenseNumber:
          type: string
          description: Vehicle id
        parkingSpotId:
          type: string
          description: Parking spot id
        issueTimestamp:
          type: integer
          format: timestamp
          description: Start time of parking
        endTimestamp:
          type: integer
          format: timestamp
          description: End time of parking
        amountPaid:
          type: number
          format: float
          description: Amount of money
        level:
          type: integer
          description: Parking lot level of the parking spot
        parkingLotId:
          type: string
          description: Parking lot id
        code:
          type: string
          description: Access code (this field will be here until GET me/ticket doesn't exist)
    UsersTicket:
      type: object
      properties:
        vehicleLicenseNumber:
          type: string
          description: Vehicle id
        issueTimestamp:
          type: integer
          format: timestamp
          description: Start time of parking
        spotOrdinalNumber:
          type: integer
          description: Number painted on the parking space which allows the user to find it
        level:
          type: integer
          description: Parking lot level of the parking spot
        parkingLotId:
          type: string
          description: Parking lot id
        code:
          type: string
          description: Access code        
    TicketCreateSchema:
      type: object
      properties:
        userId:
          type: string
          description: User table foregin key
        vehicleLicenseNumber:
          type: string
          description: Vehicle table foregin key
        parkingLotId:
          type: string
          description: Parking lot table foregin key
    ParkingLotCreateSchema:
      type: object
      properties:
        costOfMaintenance:
          type: object
          description: variables for calculating operating costs of the parking lot
          properties:
            electricity:
              type: number
              format: float
              description: Amount of money in PLN
            cleaning:
              type: number
              format: float
              description: Amount of money in PLN
            security:
              type: number
              format: float
              description: Amount of money in PLN
        location:
          type: object
          description: variables for determining the location of the parking lot
          properties:
            city:
              type: string
              description: City where the parking lot is located
            address:
              type: string
              description: Address where the parking lot is located
              examples: ["Zielona 19"]
            latitude:
              type: number
              description: Latitude of the parking lots location
            longitude:
              type: number
              description: Longitude of the parking lots location
        levels:
          type: array
          items:
            type: object
            description: description of levels (cannot be empty)
            properties:
              cars:
                type: number
              trucks:
                type: number
        tariffs:
          type: array
          items:
            type: object
            description: description of tariffs (cannot be empty)
            properties:
              maxTime:
                type: number
                description: Min hours of stop on this tariff
              minTime:
                type: number
                description: Max hours of stop on this tariff
              pricePerHour:
                type: number
                description: Price per hour
                
    ParkingLot:
      type: object
      properties:
        id:
          type: string
          description: Primary key
        costOfMaintenance:
          type: object
          description: variables for calculating operating costs of the parking lot
          properties:
            electricity:
              type: number
              format: float
              description: Amount of money in PLN
            cleaning:
              type: number
              format: float
              description: Amount of money in PLN
            security:
              type: number
              format: float
              description: Amount of money in PLN
        location:
          type: object
          description: variables for determining the location of the parking lot
          properties:
            city:
              type: string
              description: City where the parking lot is located
            address:
              type: string
              description: Address where the parking lot is located
              examples: ["Zielona 19"]
            latitude:
              type: number
              description: Latitude of the parking lots location
            longitude:
              type: number
              description: Longitude of the parking lots location
        noLevels:
          type: integer
          description: Indicator of parking lot level, can be negative
        
    Vehicle:
      type: object
      properties:
        userId:
          type: string
          description: User table foreign key
        type:
          type: string
          description: Type of vehicle
          enum:
            - CAR
            - TRUCK
        brand:
          type: string
          description: Brand of vehicle
        model:
          type: string
          description: Model of vehicle
        licensePlateNumber:
          type: string
          description: Primary key
    ParkingSpot:
      type: object
      properties:
        id:
          type: string
          description: Parking space id
        parkingLotId:
          type: string
          description: Parking lot Id
        level:
          type: number
          description: Number of level
        ordinalNumber:
          type: number
          description: Ordinal number of spot in level
        vehicleType:
          type: string
          description: Vehicle type of this spot
          enum:
            - CAR
            - TRUCK
        isOccupied:
          type: boolean
          description: Primary key
    Level:
      type: object
      properties:
        truck:
          type: object
          description: Parking space id
          properties:
            spotsOccupied:
              type: number
              description: Number of occupied truck spots in level
            spotsFree:
              type: number
              description: Number of free truck spots in level
        car:
          type: object
          description: Parking space id
          properties:
            spotsOccupied:
              type: number
              description: Number of occupied car spots in level
            spotsFree:
              type: number
              description: Number of free car spots in level
    IncomeStats:
      type: object
      properties:
        month:
          type: string
          description: Name on calculated month
          examples: ["January"]
        income:
          type: number
          description: Income in specified month
    Tariff:
      type: object
      properties:
        parkingLotId:
          type: string
        maxTime:
          type: number
          description: Min hours of stop on this tariff
        minTime:
          type: number
          description: Max hours of stop on this tariff
        pricePerHour:
          type: number
          description: Price per hour
